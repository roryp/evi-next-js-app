FROM node:18-alpine AS base

# Install required build dependencies
RUN apk add --no-cache \
    python3 \
    python3-dev \
    py3-pip \
    make \
    g++ \
    libc6-compat \
    # Canvas dependencies
    cairo-dev \
    pango-dev \
    jpeg-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    # Install setuptools using apk instead of pip
    py3-setuptools

# Install latest pnpm
RUN npm install -g pnpm@10.6.5

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./
COPY postcss.config.mjs tailwind.config.ts ./

# Add onlyBuiltDependencies config to allow build to succeed
RUN echo '{"pnpm":{"onlyBuiltDependencies":["canvas"]}}' > .npmrc

# Install dependencies with specific flags to handle native modules
RUN pnpm install --no-frozen-lockfile --production=false \
    --config.platform=linux \
    --config.ignore-scripts=false \
    --unsafe-perm

# Copy the rest of the application
COPY . .

# Set up environment for build
RUN --mount=type=secret,id=openai_key \
    --mount=type=secret,id=hume_key \
    --mount=type=secret,id=hume_secret \
    echo "OPENAI_API_KEY=$(cat /run/secrets/openai_key)" > .env.local && \
    echo "HUME_API_KEY=$(cat /run/secrets/hume_key)" >> .env.local && \
    echo "HUME_SECRET_KEY=$(cat /run/secrets/hume_secret)" >> .env.local

# Build the application
RUN pnpm build

# Create a new stage for the final image
FROM node:18-alpine AS runner
WORKDIR /app

# Copy the standalone output from the build stage
COPY --from=base /app/.next/standalone ./
COPY --from=base /app/.next/static ./.next/static
COPY --from=base /app/public ./public

# Create tmp directory for audio processing
RUN mkdir -p tmp && chmod 777 tmp

# Production runtime configuration
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

EXPOSE 3000

# Start the application using the server.js generated by Next.js
CMD ["node", "server.js"]